/**
*The class is design to implement the Turing machine tapes.
*
*@author Okekedike Gregory
*/

package turing;

public class Tape {

  /**
   * Current cell pointer
   */
  private Cell currentCell;

  /**
   * Creates a new Tape. The current cell contains a blank space, and the current
   * cell pointer should point to it.
   */
  public Tape() {
    Cell Node = new Cell();
    Node.content = ' ';
    Node.prev = null;
    Node.next = null;
    currentCell = Node;
  }

  /**
   * Returns the pointer that points to the current cell.
   * 
   * @param null
   * @return The current cell
   */
  public Cell getCurrentCell() {
    return currentCell;
  }

  /**
   * Returns the char from the current cell.
   * 
   * @param null
   * @return The current cell content.
   */
  public char getContent() {
    return currentCell.content;
  }

  /**
   * Changes the char in the current cell to the specified value.
   * 
   * @param character to set in the current cell.
   */
  public void setContent(char ch) {
    currentCell.content = ch;
  }

  /**
   * Moves the current cell one position to the left along the tape.
   * 
   * @param null
   */
  public void moveLeft() {
    if (currentCell.prev == null) {
      Cell Node = new Cell();
      Node.content = ' ';
      Node.prev = null;
      Node.next = currentCell;
      currentCell.prev = Node;
    }
    currentCell = currentCell.prev;
  }

  /**
   * Moves the current cell one position to the right along the tape.
   * 
   * @param null
   */
  public void moveRight() {
    if (currentCell.next == null) {
      Cell Node = new Cell();
      Node.content = ' ';
      Node.next = null;
      Node.prev = currentCell;
      currentCell.next = Node;
    }
    currentCell = currentCell.next;
  }

  /**
   * Returns a String consisting of the chars from all the cells on the tape.
   * 
   * @param null
   * @return The tape content.
   */
  public String getTapeContents() {
    Cell pointer = currentCell;

    while (pointer.prev != null)
      pointer = pointer.prev;

    String strContent = "";

    while (pointer != null) {
      strContent += pointer.content;
      pointer = pointer.next;
    }

    return strContent;
  }
}
